options {
    STATIC = false;
    IGNORE_CASE = true;
    LOOKAHEAD = 2;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(RunParser)
package org.jchien.shuffle.parser;

import java.util.ArrayList;
import java.util.List;

public class RunParser {
    private List<RawPokemon> team = new ArrayList<RawPokemon>();
    private boolean teamSet = false;

    private List<String> items = new ArrayList<String>();
    private boolean itemsSet = false;

    private String score = null;

    private String stage = null;

    private String movesLeft = null;

    private RawPokemonBuilder pkmnBuilder = null;

    public RunParser() {
    }

    public RawRunDetails getDetails() {
        return new RawRunDetails(team, items, score, stage, movesLeft);
    }

    public static void main(String[] args) throws ParseException, TokenMgrError, DupeSectionException {
        RunParser parser = new RunParser(System.in);
        parser.start();
        System.out.println(parser.getDetails());
    }

    private String value(Token t) {
        if (t == null) {
            return null;
        }
        return t.image;
    }

    private void initPokemon() {
        pkmnBuilder = new RawPokemonBuilder();
    }

    private void storePokemon() {
        team.add(pkmnBuilder.build());
    }

    boolean isLevel(StringBuilder sb) {
        return isDigits(sb, 0)
            || isLevel(sb, "lv")
            || isLevel(sb, "lv ");
    }

    private boolean isLevel(StringBuilder sb, String prefix) {
        return startsWithIgnoreCase(sb, prefix) && isDigits(sb, prefix.length());
    }

    private boolean startsWithIgnoreCase(StringBuilder sb, String prefix) {
        if (prefix.length() > sb.length()) {
            return false;
        }

        for (int i=0; i < prefix.length(); i++) {
            char expected = Character.toLowerCase(prefix.charAt(i));
            char actual = Character.toLowerCase(sb.charAt(i));
            if (expected != actual) {
                return false;
            }
        }

        return true;
    }

    // return true if remaining characters are all digits
    private boolean isDigits(StringBuilder sb, int start) {
        // there must be at least one digit
        if (start >= sb.length()) {
            return false;
        }

        for (int i=start; i < sb.length(); i++) {
            char ch = sb.charAt(i);
            if (ch < '0' || '9' < ch) {
                return false;
            }
        }
        return true;
    }
}
PARSER_END(RunParser)

SKIP: {
    " "
    | "\t"
    | "\n"
    | "\r"
}

TOKEN: {
    < RUN_HEADER: "!RUN" >
    | < EB_HEADER: "!EB" >
    | < TEAM_HEADER: "TEAM:" >
    | < SCORE_HEADER: "SCORE:" >
    | < ITEMS_HEADER: "ITEMS:" >
    | < MOVES_LEFT_HEADER: "MOVES LEFT:" >
    | < END_HEADER: "!END" >
    | < PERFECT: "PERFECT" >
}

TOKEN: {
    < #DIGIT: (["0"-"9"]) >
    | < #LETTER: (["A"-"Z"]) >
    | < WORD: (<DIGIT> | <LETTER> | "+" | "-" | "?" | "!")+ >
    | < SLASH: "/" >
}

// goal is to have simplest grammar, validate after parsing

// top level production
void start() throws DupeSectionException: {} {
    run() <EOF>
}

void run() throws DupeSectionException: {
    Token t;
} {
    (<RUN_HEADER> | (<EB_HEADER> t=<WORD> { stage = t.image; }))
    (section())+
    <END_HEADER>
}

void section() throws DupeSectionException: {} {
    team() | score() | items() | movesLeft()
}

void team() throws DupeSectionException: {
} {
    {
        if (teamSet) {
            throw new DupeSectionException(Section.TEAM);
        }
        teamSet = true;
        initPokemon();
    }
    <TEAM_HEADER> support() ({ storePokemon(); initPokemon(); } "," support())*
    { storePokemon(); }
}

// <pokemon> ( <perfect> | "(" (<level>, <skill level> <skill name>, <msu_count>/<max_msus> ")"
void support(): {
    Token t = null;
    StringBuilder sb = new StringBuilder();
} {
    t=<WORD>
    { sb.append(t.image); }
    (t=<WORD> { sb.append(' ').append(t.image); })*
    { pkmnBuilder.setName(sb.toString()); }
    [ "(" (<PERFECT> { pkmnBuilder.setPerfect(true); } | (supportSection() ("," supportSection())*)) ")" ]
}

void supportSection(): {
} {
    // todo dupe section exceptions
    msus() | levelOrSkill()
}

// try to avoid ambiguous grammar that lookahead didn't seem to be helping with
void levelOrSkill(): {
    Token t;
    StringBuilder sb = new StringBuilder();
} {
    t=<WORD> { sb.append(t.image); }
    (t=<WORD> { sb.append(' ').append(t.image); } )*
    {
        if (isLevel(sb)) {
            pkmnBuilder.setLevel(sb.toString());
        } else {
            // assume it's a skill name, possibly without stating the skill level
            // will have to validate it later
            pkmnBuilder.setSkill(sb.toString());
        }
    }
}

void msus(): {
    Token tMsuCount;
    Token tMaxMsus;
} {
    tMsuCount=<WORD> <SLASH> tMaxMsus=<WORD>
    { pkmnBuilder.setMsus(tMsuCount.image + "/" + tMaxMsus.image); }
}

void score() throws DupeSectionException: {
    Token t;
    StringBuilder sb = new StringBuilder();
} {
    {
        if (score != null) {
            throw new DupeSectionException(Section.SCORE);
        }
    }
    <SCORE_HEADER> t=<WORD>
    { sb.append(t.image); }
    ( ("," | ".") t=<WORD> { sb.append(t.image); } )*
    { score = sb.toString(); }
}

void items() throws DupeSectionException: {
    Token t;
} {
    {
        if (itemsSet) {
            throw new DupeSectionException(Section.ITEMS);
        }
        itemsSet = true;
    }
    <ITEMS_HEADER> t=<WORD> { items.add(t.image); } ("," t=<WORD> { items.add(t.image); })*
}

void movesLeft() throws DupeSectionException: {
    Token t;
} {
    {
        if (movesLeft != null) {
            throw new DupeSectionException(Section.MOVES);
        }
    }
    <MOVES_LEFT_HEADER> t=<WORD>
    { movesLeft = t.image; }
}
