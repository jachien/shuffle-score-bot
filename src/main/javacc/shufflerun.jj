options {
    STATIC = false;
    IGNORE_CASE = true;
    LOOKAHEAD = 1;
    UNICODE_INPUT = true;
    // DEBUG_PARSER = true;
}

PARSER_BEGIN(RunParser)
package org.jchien.shuffle.parser;

import com.google.common.annotations.VisibleForTesting;
import org.jchien.shuffle.model.FormatException;
import org.jchien.shuffle.model.MoveType;
import org.jchien.shuffle.model.StageType;
import org.jchien.shuffle.parser.exception.DupeSectionException;

import java.util.ArrayList;
import java.util.List;

public class RunParser {
    private List<RawPokemon> team = new ArrayList<RawPokemon>();
    private boolean teamSet = false;

    private List<String> items = null;
    private boolean itemsSet = false;

    private String score = null;

    private String stage = null;

    private String movesLeft = null;

    private String timeLeft = null;

    private StageType stageType = null;

    private MoveType moveType = null;

    private RawPokemonBuilder pkmnBuilder = null;

    public RunParser() {
    }

    public RawRunDetails getDetails() {
        return new RawRunDetails(team, items, score, stage, movesLeft, timeLeft, stageType, moveType);
    }

    public static void main(String[] args) throws ParseException, TokenMgrError, FormatException {
        RunParser parser = new RunParser(System.in);
        parser.start();
        System.out.println(parser.getDetails());
    }

    private String value(Token t) {
        if (t == null) {
            return null;
        }
        return t.image;
    }

    private void initPokemon() {
        pkmnBuilder = new RawPokemonBuilder();
    }

    private void storePokemon() {
        team.add(pkmnBuilder.build());
    }

    @VisibleForTesting
    boolean isLevel(String s) {
        return isDigits(s, 0)
            || isLevel(s, "lv")
            || isLevel(s, "lv ")
            || isLevel(s, "lvl")
            || isLevel(s, "lvl ");
    }

    private boolean isLevel(String s, String prefix) {
        return startsWithIgnoreCase(s, prefix) && isDigits(s, prefix.length());
    }

    private boolean startsWithIgnoreCase(String s, String prefix) {
        if (prefix.length() > s.length()) {
            return false;
        }

        for (int i=0; i < prefix.length(); i++) {
            char expected = Character.toLowerCase(prefix.charAt(i));
            char actual = Character.toLowerCase(s.charAt(i));
            if (expected != actual) {
                return false;
            }
        }

        return true;
    }

    // return true if remaining characters are all digits
    private boolean isDigits(String s, int start) {
        // there must be at least one digit
        if (start >= s.length()) {
            return false;
        }

        for (int i=start; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (ch < '0' || '9' < ch) {
                return false;
            }
        }
        return true;
    }
}
PARSER_END(RunParser)

SKIP: {
    " "
    | "\t"
    | "\n"
    | "\r"
}

TOKEN: {
    < END_HEADER: "!END" >
    | < COMP_HEADER: "!COMP" >
    | < RUN_HEADER: "!RUN" >
    | < EB_HEADER: "!EB" >
    | < ROSTER_HEADER: "!ROSTER" >
    | < TEAM_HEADER: "TEAM:" >
    | < SCORE_HEADER: "SCORE:" >
    | < ITEMS_HEADER: "ITEMS:" >
    // code points taken from https://en.wikipedia.org/wiki/Whitespace_character#Unicode
    | < #WHITESPACE: "\t" | "\n" | "\r" | " " | "\u0085" | "\u00a0"
                     | "\u1680" | "\u2000" | "\u2001" | "\u2002" | "\u2003" | "\u2004" | "\u2005" | "\u2006"
                     | "\u2007" | "\u2008" | "\u2009" | "\u200a" | "\u2028" | "\u2029" | "\u202f" | "\u205f"
                     | "\u3000" >
    | < MOVES_LEFT_HEADER: "MOVES" <WHITESPACE> "LEFT:" >
    | < TIME_LEFT_HEADER: "TIME" <WHITESPACE> "LEFT:" >
    | < NOTES_HEADER: "NOTES:" >
    | < PERFECT: "PERFECT" >
}

TOKEN: {
    < SLASH: "/" >
    | < LPAREN: "(" >
    | < RPAREN: ")" >
    | < COMMA: "," >
    | < #DIGIT: (["0"-"9"]) >
    | < #LETTER: (["A"-"Z"]) >
    | < WORD: (<DIGIT> | <LETTER> | "+" | "-" | "?" | "!" | ".")+ >
}

SKIP: {
    < UNSUPPORTED_TOKEN: ~[]>
}

// goal is to have simplest grammar, validate after parsing

// top level production
void start() throws FormatException: {} {
    run() <EOF>
}

void run() throws FormatException: {
    Token t;
} {
    (runHeader() | ebHeader() | compHeader())
    (section())+
    <END_HEADER>
}

void roster() throws FormatException: {
} {
    <ROSTER_HEADER> supportList() <END_HEADER>
    // this isn't a stage but we're hacking in the initial roster support implementation
    { stageType = StageType.ROSTER; }
}

String multiWord(): {
    Token t;
    StringBuilder sb = new StringBuilder();
} {
    t=<WORD> { sb.append(t.image); }
    (t=<WORD> { sb.append(' ').append(t.image); } )*
    { return sb.toString(); }
}

void runHeader(): {
    Token t;
    String s;
} {
    <RUN_HEADER> s=multiWord()
    {
        stage = s;
        stageType = StageType.NORMAL;
    }
}

void ebHeader(): {
    Token t;
    String s;
} {
    <EB_HEADER> s=multiWord()
    {
        stage = s;
        stageType = StageType.ESCALATION_BATTLE;
    }
}

void compHeader(): {
} {
    <COMP_HEADER>
    {
        stage = null;
        stageType = StageType.COMPETITION;
        // we're going to assume timed competitions are not returning
        moveType = MoveType.MOVES;
    }
}

void section() throws FormatException: {} {
    team() | score() | items() | movesLeft() | timeLeft() | notes()
}

void team() throws DupeSectionException: {
} {
    <TEAM_HEADER> supportList()
}

void supportList() throws DupeSectionException: {
} {
    {
        if (teamSet) {
            throw new DupeSectionException(Section.TEAM);
        }
        teamSet = true;
        initPokemon();
    }
    support() ({ storePokemon(); initPokemon(); } <COMMA> support())*
    { storePokemon(); }
}

void support(): {
    Token t = null;
    String s;
} {
    s=multiWord()
    { pkmnBuilder.setName(s); }
    [ <LPAREN> (<PERFECT> { pkmnBuilder.setPerfect(true); } | (supportSection() (<COMMA> supportSection())*)) <RPAREN> ]
}

void supportSection(): {
} {
    // todo dupe section exceptions
    LOOKAHEAD(2)
    msus() | levelOrSkill()
}

// try to avoid ambiguous grammar that lookahead didn't seem to be helping with
void levelOrSkill(): {
    Token t;
    String s;
} {
    s=multiWord()
    {
        if (isLevel(s)) {
            pkmnBuilder.setLevel(s);
        } else {
            // assume it's a skill name, possibly without stating the skill level
            // will have to validate it later
            pkmnBuilder.setSkill(s);
        }
    }
}

void msus(): {
    Token tMsuCount;
    Token tMaxMsus;
} {
    tMsuCount=<WORD> <SLASH> tMaxMsus=<WORD>
    { pkmnBuilder.setMsus(tMsuCount.image + "/" + tMaxMsus.image); }
}

void score() throws DupeSectionException: {
    Token t;
    StringBuilder sb = new StringBuilder();
} {
    {
        if (score != null) {
            throw new DupeSectionException(Section.SCORE);
        }
    }
    <SCORE_HEADER> t=<WORD>
    { sb.append(t.image); }
    ( <COMMA> t=<WORD> { sb.append(t.image); } )*
    { score = sb.toString(); }
}

void items() throws DupeSectionException: {
    String s;
} {
    {
        if (items != null) {
            throw new DupeSectionException(Section.ITEMS);
        }
        items = new ArrayList<String>();
    }
    <ITEMS_HEADER>
    s=multiWord() { items.add(s); }
    (<COMMA> s=multiWord() { items.add(s); })*
}

void movesLeft() throws FormatException: {
    Token t;
} {
    {
        if (movesLeft != null) {
            throw new DupeSectionException(Section.MOVES);
        }
        if (timeLeft != null) {
            throw new FormatException("Cannot have both moves left and time left.");
        }
    }
    <MOVES_LEFT_HEADER> t=<WORD>
    {
        movesLeft = t.image;
        moveType = MoveType.MOVES;
    }
}


void timeLeft() throws FormatException: {
    Token t;
} {
    {
        if (timeLeft != null) {
            throw new DupeSectionException(Section.TIME);
        }
        if (movesLeft != null) {
            throw new FormatException("Cannot have both moves left and time left.");
        }
    }
    // todo support units like "time left: 5 secs" or "time left: 5s"
    <TIME_LEFT_HEADER> t=<WORD>
    {
        timeLeft = t.image;
        moveType = MoveType.TIME;
    }
}

void notes(): {
} {
    // there's gotta be a better way to do this
    <NOTES_HEADER> (<WORD> | <SLASH> | <LPAREN> | <RPAREN> | <COMMA>)*
}
