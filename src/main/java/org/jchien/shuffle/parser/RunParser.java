/* RunParser.java */
/* Generated By:JavaCC: Do not edit this line. RunParser.java */
package org.jchien.shuffle.parser;

import java.util.ArrayList;
import java.util.List;

public class RunParser implements RunParserConstants {
    private List<RawPokemon> team = new ArrayList<RawPokemon>();
    private boolean teamSet = false;

    private List<String> items = new ArrayList<String>();
    private boolean itemsSet = false;

    private String score = null;

    private String stage = null;

    private String movesLeft = null;

    private RawPokemonBuilder pkmnBuilder = null;

    public RunParser() {
    }

    public RawRunDetails getDetails() {
        return new RawRunDetails(team, items, score, stage, movesLeft);
    }

    public static void main(String[] args) throws ParseException, TokenMgrError, DupeSectionException {
        RunParser parser = new RunParser(System.in);
        parser.start();
        System.out.println(parser.getDetails());
    }

    private String value(Token t) {
        if (t == null) {
            return null;
        }
        return t.image;
    }

    private void initPokemon() {
        pkmnBuilder = new RawPokemonBuilder();
    }

    private void storePokemon() {
        team.add(pkmnBuilder.build());
    }

    private boolean isLevel(StringBuilder sb) {
        return isDigits(sb, 0)
            || isLevel(sb, "lv")
            || isLevel(sb, "lv ");
    }

    private boolean isLevel(StringBuilder sb, String prefix) {
        return startsWithIgnoreCase(sb, prefix) && isDigits(sb, prefix.length());
    }

    private boolean startsWithIgnoreCase(StringBuilder sb, String prefix) {
        if (prefix.length() > sb.length()) {
            return false;
        }

        for (int i=0; i < prefix.length(); i++) {
            char expected = Character.toLowerCase(prefix.charAt(i));
            char actual = Character.toLowerCase(sb.charAt(i));
            if (expected != actual) {
                return false;
            }
        }

        return true;
    }

    // return true if remaining characters are all digits
    private boolean isDigits(StringBuilder sb, int start) {
        // there must be at least one digit
        if (start >= sb.length()) {
            return false;
        }

        for (int i=start; i < sb.length(); i++) {
            char ch = sb.charAt(i);
            if (ch < '0' || '9' < ch) {
                return false;
            }
        }
        return true;
    }

// goal is to have simplest grammar, validate after parsing

// top level production
  final public void start() throws ParseException, DupeSectionException {
    trace_call("start");
    try {

      run();
      jj_consume_token(0);
    } finally {
      trace_return("start");
    }
}

  final public void run() throws ParseException, DupeSectionException {
    trace_call("run");
    try {
Token t;
      if (jj_2_1(2)) {
        jj_consume_token(RUN_HEADER);
      } else if (jj_2_2(2)) {
        jj_consume_token(EB_HEADER);
        t = jj_consume_token(WORD);
stage = t.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        section();
        if (jj_2_3(2)) {
          ;
        } else {
          break label_1;
        }
      }
      jj_consume_token(END_HEADER);
    } finally {
      trace_return("run");
    }
}

  final public void section() throws ParseException, DupeSectionException {
    trace_call("section");
    try {

      if (jj_2_4(2)) {
        team();
      } else if (jj_2_5(2)) {
        score();
      } else if (jj_2_6(2)) {
        items();
      } else if (jj_2_7(2)) {
        movesLeft();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("section");
    }
}

  final public void team() throws ParseException, DupeSectionException {
    trace_call("team");
    try {

if (teamSet) {
            {if (true) throw new DupeSectionException(Section.TEAM);}
        }
        teamSet = true;
        initPokemon();
      jj_consume_token(TEAM_HEADER);
      support();
      label_2:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_2;
        }
storePokemon(); initPokemon();
        jj_consume_token(17);
        support();
      }
storePokemon();
    } finally {
      trace_return("team");
    }
}

// <pokemon> ( <perfect> | "(" (<level>, <skill level> <skill name>, <msu_count>/<max_msus> ")"
  final public void support() throws ParseException {
    trace_call("support");
    try {
Token t = null;
    StringBuilder sb = new StringBuilder();
      t = jj_consume_token(WORD);
sb.append(t.image);
      label_3:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_3;
        }
        t = jj_consume_token(WORD);
sb.append(' ').append(t.image);
      }
pkmnBuilder.setName(sb.toString());
      jj_consume_token(18);
      if (jj_2_11(2)) {
        jj_consume_token(PERFECT);
pkmnBuilder.setPerfect(true);
      } else if (jj_2_12(2)) {
        supportSection();
        label_4:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(17);
          supportSection();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(19);
    } finally {
      trace_return("support");
    }
}

  final public void supportSection() throws ParseException {
    trace_call("supportSection");
    try {

      if (jj_2_13(2)) {
        msus();
      } else if (jj_2_14(2)) {
        levelOrSkill();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("supportSection");
    }
}

// try to avoid ambiguous grammar that lookahead didn't seem to be helping with
  final public void levelOrSkill() throws ParseException {
    trace_call("levelOrSkill");
    try {
Token t;
    StringBuilder sb = new StringBuilder();
      t = jj_consume_token(WORD);
sb.append(t.image);
      label_5:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_5;
        }
        t = jj_consume_token(WORD);
sb.append(' ').append(t.image);
      }
if (isLevel(sb)) {
            pkmnBuilder.setLevel(sb.toString());
        } else {
            // assume it's a skill name, possibly without stating the skill level
            // will have to validate it later
            pkmnBuilder.setSkill(sb.toString());
        }
    } finally {
      trace_return("levelOrSkill");
    }
}

  final public void msus() throws ParseException {
    trace_call("msus");
    try {
Token tMsuCount;
    Token tMaxMsus;
      tMsuCount = jj_consume_token(WORD);
      jj_consume_token(SLASH);
      tMaxMsus = jj_consume_token(WORD);
pkmnBuilder.setMsus(tMsuCount.image + "/" + tMaxMsus.image);
    } finally {
      trace_return("msus");
    }
}

  final public void score() throws ParseException, DupeSectionException {
    trace_call("score");
    try {
Token t;
    StringBuilder sb = new StringBuilder();
if (score != null) {
            {if (true) throw new DupeSectionException(Section.SCORE);}
        }
      jj_consume_token(SCORE_HEADER);
      t = jj_consume_token(WORD);
sb.append(t.image);
      label_6:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_6;
        }
        if (jj_2_17(2)) {
          jj_consume_token(17);
        } else if (jj_2_18(2)) {
          jj_consume_token(20);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(WORD);
sb.append(t.image);
      }
score = sb.toString();
    } finally {
      trace_return("score");
    }
}

  final public void items() throws ParseException, DupeSectionException {
    trace_call("items");
    try {
Token t;
if (itemsSet) {
            {if (true) throw new DupeSectionException(Section.ITEMS);}
        }
        itemsSet = true;
      jj_consume_token(ITEMS_HEADER);
      t = jj_consume_token(WORD);
items.add(t.image);
      label_7:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(17);
        t = jj_consume_token(WORD);
items.add(t.image);
      }
    } finally {
      trace_return("items");
    }
}

  final public void movesLeft() throws ParseException, DupeSectionException {
    trace_call("movesLeft");
    try {
Token t;
if (movesLeft != null) {
            {if (true) throw new DupeSectionException(Section.MOVES);}
        }
      jj_consume_token(MOVES_LEFT_HEADER);
      t = jj_consume_token(WORD);
movesLeft = t.image;
    } finally {
      trace_return("movesLeft");
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3_14()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (!jj_rescan) trace_call("levelOrSkill(LOOKING AHEAD...)");
    if (jj_scan_token(WORD)) { if (!jj_rescan) trace_return("levelOrSkill(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("levelOrSkill(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(17)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (!jj_rescan) trace_call("supportSection(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) { if (!jj_rescan) trace_return("supportSection(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("supportSection(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_11()
 {
    if (!jj_rescan) trace_call("items(LOOKING AHEAD...)");
    if (jj_scan_token(ITEMS_HEADER)) { if (!jj_rescan) trace_return("items(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(WORD)) { if (!jj_rescan) trace_return("items(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("items(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_13()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(PERFECT)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (!jj_rescan) trace_call("support(LOOKING AHEAD...)");
    if (jj_scan_token(WORD)) { if (!jj_rescan) trace_return("support(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("support(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_6()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (!jj_rescan) trace_call("score(LOOKING AHEAD...)");
    if (jj_scan_token(SCORE_HEADER)) { if (!jj_rescan) trace_return("score(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(WORD)) { if (!jj_rescan) trace_return("score(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("score(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(EB_HEADER)) return true;
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (!jj_rescan) trace_call("msus(LOOKING AHEAD...)");
    if (jj_scan_token(WORD)) { if (!jj_rescan) trace_return("msus(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(SLASH)) { if (!jj_rescan) trace_return("msus(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("msus(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_5()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (!jj_rescan) trace_call("team(LOOKING AHEAD...)");
    if (jj_scan_token(TEAM_HEADER)) { if (!jj_rescan) trace_return("team(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_13()) { if (!jj_rescan) trace_return("team(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("team(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(17)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (!jj_rescan) trace_call("section(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) { if (!jj_rescan) trace_return("section(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("section(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_4()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (!jj_rescan) trace_call("movesLeft(LOOKING AHEAD...)");
    if (jj_scan_token(MOVES_LEFT_HEADER)) { if (!jj_rescan) trace_return("movesLeft(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(WORD)) { if (!jj_rescan) trace_return("movesLeft(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("movesLeft(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_3()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(RUN_HEADER)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RunParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public RunParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RunParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RunParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RunParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RunParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RunParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RunParser(RunParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RunParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 } else {
	   trace_scan(jj_scanpos, kind);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[21];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 21; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 19; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
